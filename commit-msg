#!/bin/sh
#
# hook script to check the commit message format
# example format --- "{type}({scope}): {subject}"

MERGE=merge # reserved for git flow default message

BUILD=build
CI=ci
DOCO=doco
RFTR=rftr
STYLE=style
TEST=test
FEAT=feat
FIX=fix
PERF=perf

INSTRUCTION=$"
INSTRUCTION\n
- action: \n
prefix represent kind of the change\n
    available types: ${BUILD}|${CI}|${DOCO}|${RFTR}|${STYLE}|${TEST}|${FEAT}|${FIX}|${PERF}\n
\t  - ${BUILD}: build system, package dependencies\n
\t  - ${CI}: continuous integration and deployment system\n
\t  - ${DOCO}: documentation\n
\t  - ${RFTR}: code refactor\n
\t  - ${STYLE}: code style change\n
\t  - ${TEST}: refactor existing test, new test (unit, integration)\n
\t  - ${FEAT}: new features\n
\t  - ${FIX}: bug fix\n
\t  - ${PERF}: performance improvement\n
- scope: \n
information represent context of the change\n
this can be package name, script name\n
- subject: \n
concise description of the actual changes as the commit message\n
"

# set up pattern: {action}({scoope}): {message}
PATTERN_GENERAL="(${BUILD}|${CI}|${DOCO}|${RFTR}|${STYLE}|${TEST}|${FEAT}|${FIX}|${PERF})\((.+)\)\: .+"
PATTERN_MERGE="merge branch '.+' into .+"

# check if the commit message matches the pattern
cat $1 | egrep -i "^(${PATTERN_GENERAL}|${PATTERN_MERGE})"

# retrieve the exit code
COMMIT_EXIT_CODE=$?

# print instructions if the commit message doesn't follow the pattern
test 0 = ${COMMIT_EXIT_CODE} ||
{
    echo >&2 "\nERROR: Please follow commit message format \"Action(scope): Subject\"\n";

    echo ${INSTRUCTION}

    # make sure the exit code is non-zero
    exit 1
}
